import fs from "fs";
import path from "path";

const readmePath = path.join(process.cwd(), "README.md");

// Helpers
const getKstDateId = () => {
  const now = new Date();
  // Convert to KST (UTC+9)
  const kst = new Date(now.getTime() + 9 * 60 * 60 * 1000);
  const yyyy = String(kst.getUTCFullYear());
  const mm = String(kst.getUTCMonth() + 1).padStart(2, "0");
  const dd = String(kst.getUTCDate()).padStart(2, "0");
  return `${yyyy}${mm}${dd}`;
};

const OLLAMA_BASE_URL = process.env.OLLAMA_BASE_URL || "http://localhost:11434";
const OLLAMA_MODEL = process.env.OLLAMA_MODEL || "qwen2.5:7b-instruct";

const buildPrompt = (topicOfTheDay) => {
  return `Role: Senior developer interviewer. Generate exactly ONE development quiz.\nRequirements:\n- Language: English\n- type: "open" or "mcq"\n- Question: 1-2 sentences\n- Answer: 3-6 lines, in Markdown; use code fences when helpful\n- Difficulty: beginner|intermediate|advanced\n- Avoid duplicates or trivial variants\n- Output must be valid JSON only and MUST conform to the schema below\n\nToday's topic: ${topicOfTheDay}\n\nJSON schema:\n{\n  "type": "object",\n  "required": ["id","question","answer","difficulty","tags","type"],\n  "properties": {\n    "id": {"type":"string", "pattern":"^\\\\d{8}$"},\n    "question": {"type":"string", "maxLength": 200},\n    "answer": {"type":"string", "maxLength": 1200},\n    "difficulty": {"enum":["beginner","intermediate","advanced"]},\n    "tags": {"type":"array","items":{"type":"string"},"minItems":1},\n    "type": {"enum":["open","mcq"]},\n    "explanation": {"type":"string"},\n    "code": {"type":"string"}\n  }\n}`;
};

const validateGeneratedQuiz = (q) => {
  if (!q || typeof q !== "object") return false;
  if (typeof q.question !== "string" || q.question.length < 5) return false;
  if (typeof q.answer !== "string" || q.answer.length < 5) return false;
  // Fill id with KST date regardless of model output
  q.id = getKstDateId();
  return true;
};

const generateQuizWithOllama = async () => {
  try {
    const topics = ["JavaScript", "Web", "HTTP", "CSS", "Node.js", "CS Basics"];
    const topicOfTheDay = topics[new Date().getUTCDay() % topics.length];
    const resp = await fetch(`${OLLAMA_BASE_URL}/api/generate`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model: OLLAMA_MODEL,
        prompt: buildPrompt(topicOfTheDay),
        stream: false,
      }),
    });
    if (!resp.ok) throw new Error(`Ollama error: ${resp.status}`);
    const data = await resp.json();
    const content = data?.response;
    if (!content) throw new Error("No content from Ollama");
    let parsed;
    try {
      parsed = JSON.parse(content);
    } catch (e) {
      const match = content.match(/\{[\s\S]*\}/);
      parsed = match ? JSON.parse(match[0]) : null;
    }
    if (!validateGeneratedQuiz(parsed)) return null;
    return parsed;
  } catch (e) {
    console.error("Ollama generation failed:", e.message);
    return null;
  }
};

const ollamaQuiz = await generateQuizWithOllama();
if (!ollamaQuiz) {
  console.error("No quiz generated by Ollama. Aborting.");
  process.exit(1);
}
const quiz = ollamaQuiz;

let readme = fs.readFileSync(readmePath, "utf-8");

const metaParts = [];
if (quiz.difficulty) metaParts.push(`Difficulty: ${quiz.difficulty}`);
if (Array.isArray(quiz.tags) && quiz.tags.length) metaParts.push(`Tags: ${quiz.tags.join(", ")}`);
metaParts.push(`Date: ${getKstDateId()}`);
const metaBlock = metaParts.length ? `_${metaParts.join(" | ")}_\n\n` : "";

const newQuizSection = `<!--START_SECTION:quiz-->

**‚ùì Q. ${quiz.question}**

${metaBlock}<details>
<summary>Show Answer üëÄ</summary>

${quiz.answer}

</details>
<!--END_SECTION:quiz-->`;

readme = readme.replace(
  /<!--START_SECTION:quiz-->[\s\S]*<!--END_SECTION:quiz-->/,
  newQuizSection,
);

fs.writeFileSync(readmePath, readme);

console.log(`Updated quiz: ${quiz.question}`);
